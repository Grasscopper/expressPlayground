{"ast":null,"code":"var _jsxFileName = \"/Users/grasscopper/playground/react/src/containers/CharactersContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport CharacterTiles from \"../components/CharacterTiles\";\n\nconst CharactersContainer = props => {\n  let [chars, setChars] = useState([]);\n  useEffect(() => {\n    fetch('/characters', {\n      credentials: 'same-origin',\n      method: \"POST\",\n      body: JSON.stringify(formPayload),\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setChars(body);\n    }).catch(error => {\n      console.error(`Error in fetch: ${error.message}`);\n    });\n  }, []);\n  let charTiles = chars.map(char => {\n    return /*#__PURE__*/React.createElement(CharacterTiles, {\n      key: char,\n      name: char,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, charTiles);\n};\n\nexport default CharactersContainer;","map":{"version":3,"sources":["/Users/grasscopper/playground/react/src/containers/CharactersContainer.js"],"names":["React","useState","useEffect","CharacterTiles","CharactersContainer","props","chars","setChars","fetch","credentials","method","body","JSON","stringify","formPayload","headers","then","response","ok","errorMessage","status","statusText","error","Error","json","catch","console","message","charTiles","map","char"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;;AAEA,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AACrC,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,KAAK,CAAC,aAAD,EAAgB;AACnBC,MAAAA,WAAW,EAAE,aADM;AAEnBC,MAAAA,MAAM,EAAE,MAFW;AAGnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,WAAf,CAHa;AAInBC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEP,kBAAU;AAFH;AAJU,KAAhB,CAAL,CASCC,IATD,CASOC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAP;AACD,OAFD,MAEO;AACL,YAAIE,YAAY,GAAI,GAAEF,QAAQ,CAACG,MAAO,KAAIH,QAAQ,CAACI,UAAW,EAA9D;AACA,YAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAV,CAAZ;AACA,cAAMG,KAAN;AACD;AACF,KAjBD,EAkBCN,IAlBD,CAkBOC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACO,IAAT,EAAP;AACD,KApBD,EAqBCR,IArBD,CAqBOL,IAAD,IAAU;AACdJ,MAAAA,QAAQ,CAACI,IAAD,CAAR;AACD,KAvBD,EAwBCc,KAxBD,CAwBQH,KAAD,IAAW;AAChBI,MAAAA,OAAO,CAACJ,KAAR,CAAe,mBAAkBA,KAAK,CAACK,OAAQ,EAA/C;AACD,KA1BD;AA2BD,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,MAAIC,SAAS,GAAGtB,KAAK,CAACuB,GAAN,CAAWC,IAAD,IAAU;AAClC,wBACE,oBAAC,cAAD;AACA,MAAA,GAAG,EAAEA,IADL;AAEA,MAAA,IAAI,EAAEA,IAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAMD,GAPe,CAAhB;AASA,sBACE,0CAAGF,SAAH,CADF;AAGD,CA7CD;;AA+CA,eAAexB,mBAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport CharacterTiles from \"../components/CharacterTiles\"\n\nconst CharactersContainer = (props) => {\n  let [chars, setChars] = useState([])\n\n  useEffect(() => {\n    fetch('/characters', {\n      credentials: 'same-origin',\n      method: \"POST\",\n      body: JSON.stringify(formPayload),\n      headers: {\n        \"content-type\": \"application/json\",\n        \"Accept\": \"application/json\"\n      }\n    })\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((body) => {\n      setChars(body)\n    })\n    .catch((error) => {\n      console.error(`Error in fetch: ${error.message}`)\n    })\n  }, [])\n\n  let charTiles = chars.map((char) => {\n    return (\n      <CharacterTiles\n      key={char}\n      name={char}\n      />\n    )\n  })\n\n  return (\n    <>{charTiles}</>\n  )\n}\n\nexport default CharactersContainer\n"]},"metadata":{},"sourceType":"module"}