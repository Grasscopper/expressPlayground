{"ast":null,"code":"var _jsxFileName = \"/Users/grasscopper/playground/react/src/containers/CharactersIndexContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport CharacterTiles from \"../components/CharacterTiles\";\nimport CharactersNewForm from \"../components/CharactersNewForm\";\n\nconst CharactersIndexContainer = props => {\n  let [chars, setChars] = useState([]);\n\n  const getChars = () => {\n    fetch('/characters').then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(chars => {\n      setChars(chars);\n    }).catch(error => {\n      console.error(`Error fetching characters: ${error.message}`);\n    });\n  };\n\n  useEffect(() => {\n    getChars();\n  }, []);\n\n  const postNewChar = formPayload => {\n    fetch('/characters', {\n      credentials: 'same-origin',\n      method: 'POST',\n      body: JSON.stringify(formPayload),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(char => {\n      setChars([...chars, char]);\n    }).catch(error => {\n      console.error(`Error posting character: ${error.message}`);\n    });\n  };\n\n  const deleteChar = charID => {\n    fetch(`/characters/${charID}`, {\n      credentials: 'same-origin',\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(chars => {\n      setChars(chars);\n    }).catch(error => {\n      console.error(`Error deleting character: ${error.message}`);\n    });\n  };\n\n  const editChar = (charID, char) => {\n    fetch(`/characters/${charID}`);\n  };\n\n  let charTiles = chars.map(char => {\n    return /*#__PURE__*/React.createElement(CharacterTiles, {\n      key: char._id,\n      id: char._id,\n      name: char.name,\n      deleteChar: deleteChar,\n      editChar: editChar,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 7\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }\n  }, \"Characters Index Page\"), /*#__PURE__*/React.createElement(CharactersNewForm, {\n    postNewChar: postNewChar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }\n  }, charTiles));\n};\n\nexport default CharactersIndexContainer;","map":{"version":3,"sources":["/Users/grasscopper/playground/react/src/containers/CharactersIndexContainer.js"],"names":["React","useState","useEffect","CharacterTiles","CharactersNewForm","CharactersIndexContainer","props","chars","setChars","getChars","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","catch","console","message","postNewChar","formPayload","credentials","method","body","JSON","stringify","headers","Accept","char","deleteChar","charID","editChar","charTiles","map","_id","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport CharacterTiles from \"../components/CharacterTiles\"\nimport CharactersNewForm from \"../components/CharactersNewForm\"\n\nconst CharactersIndexContainer = (props) => {\n  let [chars, setChars] = useState([])\n\n  const getChars = () => {\n    fetch('/characters')\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((chars) => {\n      setChars(chars)\n    })\n    .catch((error) => {\n      console.error(`Error fetching characters: ${error.message}`)\n    })\n  }\n\n  useEffect(() => {\n    getChars()\n  }, [])\n\n  const postNewChar = (formPayload) => {\n    fetch('/characters', {\n      credentials: 'same-origin',\n      method: 'POST',\n      body: JSON.stringify(formPayload),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((char) => {\n      setChars([\n        ...chars,\n        char\n      ])\n    })\n    .catch((error) => {\n      console.error(`Error posting character: ${error.message}`)\n    })\n  }\n\n  const deleteChar = (charID) => {\n    fetch(`/characters/${charID}`, {\n      credentials: 'same-origin',\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    })\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((chars) => {\n      setChars(chars)\n    })\n    .catch((error) => {\n      console.error(`Error deleting character: ${error.message}`)\n    })\n  }\n\n  const editChar = (charID, char) => {\n    fetch(`/characters/${charID}`)\n  }\n\n  let charTiles = chars.map((char) => {\n    return (\n      <CharacterTiles\n      key={char._id}\n      id={char._id}\n      name={char.name}\n      deleteChar={deleteChar}\n      editChar={editChar}\n      />\n    )\n  })\n\n  return (\n    <div>\n      <h1>Characters Index Page</h1>\n      <CharactersNewForm postNewChar={postNewChar} />\n      <ul>{charTiles}</ul>\n    </div>\n  )\n}\n\nexport default CharactersIndexContainer\n"]},"metadata":{},"sourceType":"module"}