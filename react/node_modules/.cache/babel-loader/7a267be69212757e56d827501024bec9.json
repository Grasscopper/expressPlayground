{"ast":null,"code":"var _jsxFileName = \"/Users/grasscopper/playground/react/src/containers/CharactersShowContainer.js\";\nimport React, { useState, useEffect } from \"react\";\n\nconst CharactersShowContainer = props => {\n  let charID = props.match.params.id;\n  useEffect(() => {\n    fetch(`/characters/${charID}`).then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      debugger;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, \"Link and Zelda\");\n};\n\nexport default CharactersShowContainer;","map":{"version":3,"sources":["/Users/grasscopper/playground/react/src/containers/CharactersShowContainer.js"],"names":["React","useState","useEffect","CharactersShowContainer","props","charID","match","params","id","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,uBAAuB,GAAIC,KAAD,IAAW;AACzC,MAAIC,MAAM,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,EAAhC;AACAN,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,KAAK,CAAE,eAAcJ,MAAO,EAAvB,CAAL,CACCK,IADD,CACOC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAP;AACD,OAFD,MAEO;AACL,YAAIE,YAAY,GAAI,GAAEF,QAAQ,CAACG,MAAO,KAAIH,QAAQ,CAACI,UAAW,EAA9D;AACA,YAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAV,CAAZ;AACA,cAAMG,KAAN;AACD;AACF,KATD,EAUCN,IAVD,CAUOC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACO,IAAT,EAAP;AACD,KAZD,EAaCR,IAbD,CAaOS,IAAD,IAAU;AACd;AACD,KAfD;AAgBD,GAjBQ,EAiBN,EAjBM,CAAT;AAkBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF;AAGD,CAvBD;;AAyBA,eAAehB,uBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\n\nconst CharactersShowContainer = (props) => {\n  let charID = props.match.params.id\n  useEffect(() => {\n    fetch(`/characters/${charID}`)\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((body) => {\n      debugger\n    })\n  }, [])\n  return (\n    <p>Link and Zelda</p>\n  )\n}\n\nexport default CharactersShowContainer\n"]},"metadata":{},"sourceType":"module"}