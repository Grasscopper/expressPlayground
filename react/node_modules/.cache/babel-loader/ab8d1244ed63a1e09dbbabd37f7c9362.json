{"ast":null,"code":"var _jsxFileName = \"/Users/grasscopper/playground/react/src/containers/CharactersIndexContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport CharacterTiles from \"../components/CharacterTiles\";\nimport CharactersNewForm from \"../components/CharactersNewForm\";\n\nconst CharactersIndexContainer = props => {\n  let [chars, setChars] = useState([]);\n  useEffect(() => {\n    fetch('/characters').then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setChars(body);\n    }).catch(error => {\n      console.error(`Error fetching characters: ${error.message}`);\n    });\n  }, []);\n\n  const postNewChar = formPayload => {\n    fetch('/characters', {\n      credentials: 'same-origin',\n      method: 'POST',\n      body: JSON.stringify(formPayload),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      debugger;\n      setChars([...chars, {\n        name: body\n      }]);\n    }).catch(error => {\n      console.error(`Error posting character: ${error.message}`);\n    });\n  };\n\n  let charTiles = chars.map(char => {\n    return /*#__PURE__*/React.createElement(CharacterTiles, {\n      key: char._id,\n      id: char._id,\n      name: char.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 7\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, \"Characters Index Page\"), /*#__PURE__*/React.createElement(CharactersNewForm, {\n    postNewChar: postNewChar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, charTiles));\n};\n\nexport default CharactersIndexContainer;","map":{"version":3,"sources":["/Users/grasscopper/playground/react/src/containers/CharactersIndexContainer.js"],"names":["React","useState","useEffect","CharacterTiles","CharactersNewForm","CharactersIndexContainer","props","chars","setChars","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body","catch","console","message","postNewChar","formPayload","credentials","method","JSON","stringify","headers","Accept","name","charTiles","map","char","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport CharacterTiles from \"../components/CharacterTiles\"\nimport CharactersNewForm from \"../components/CharactersNewForm\"\n\nconst CharactersIndexContainer = (props) => {\n  let [chars, setChars] = useState([])\n\n  useEffect(() => {\n    fetch('/characters')\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((body) => {\n      setChars(body)\n    })\n    .catch((error) => {\n      console.error(`Error fetching characters: ${error.message}`)\n    })\n  }, [])\n\n  const postNewChar = (formPayload) => {\n    fetch('/characters', {\n      credentials: 'same-origin',\n      method: 'POST',\n      body: JSON.stringify(formPayload),\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    })\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((body) => {\n      debugger\n      setChars([\n        ...chars,\n        {\n          name: body\n        }\n      ])\n    })\n    .catch((error) => {\n      console.error(`Error posting character: ${error.message}`)\n    })\n  }\n\n  let charTiles = chars.map((char) => {\n    return (\n      <CharacterTiles\n      key={char._id}\n      id={char._id}\n      name={char.name}\n      />\n    )\n  })\n\n  return (\n    <div>\n      <h1>Characters Index Page</h1>\n      <CharactersNewForm postNewChar={postNewChar} />\n      <ul>{charTiles}</ul>\n    </div>\n  )\n}\n\nexport default CharactersIndexContainer\n"]},"metadata":{},"sourceType":"module"}