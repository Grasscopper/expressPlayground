{"ast":null,"code":"var _jsxFileName = \"/Users/grasscopper/playground/react/src/containers/CharactersIndexContainer.js\";\nimport React, { useState, useEffect } from 'react';\nimport CharacterTiles from \"../components/CharacterTiles\";\nimport CharactersNewForm from \"../components/CharactersNewForm\";\n\nconst CharactersIndexContainer = props => {\n  let [chars, setChars] = useState([]);\n  useEffect(() => {\n    fetch('/characters').then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setChars(body);\n    }).catch(error => {\n      console.error(`Error fetching characters: ${error.message}`);\n    });\n  }, []);\n  let charTiles = chars.map(char => {\n    return /*#__PURE__*/React.createElement(CharacterTiles, {\n      key: char._id,\n      id: char._id,\n      name: char.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"Characters Index Page\"), /*#__PURE__*/React.createElement(CharactersNewForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, charTiles));\n};\n\nexport default CharactersIndexContainer;","map":{"version":3,"sources":["/Users/grasscopper/playground/react/src/containers/CharactersIndexContainer.js"],"names":["React","useState","useEffect","CharacterTiles","CharactersNewForm","CharactersIndexContainer","props","chars","setChars","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body","catch","console","message","charTiles","map","char","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;;AAEA,MAAMC,wBAAwB,GAAIC,KAAD,IAAW;AAC1C,MAAI,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,KAAK,CAAC,aAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAP;AACD,OAFD,MAEO;AACL,YAAIE,YAAY,GAAI,GAAEF,QAAQ,CAACG,MAAO,KAAIH,QAAQ,CAACI,UAAW,EAA9D;AACA,YAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAV,CAAZ;AACA,cAAMG,KAAN;AACD;AACF,KATD,EAUCN,IAVD,CAUOC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACO,IAAT,EAAP;AACD,KAZD,EAaCR,IAbD,CAaOS,IAAD,IAAU;AACdX,MAAAA,QAAQ,CAACW,IAAD,CAAR;AACD,KAfD,EAgBCC,KAhBD,CAgBQJ,KAAD,IAAW;AAChBK,MAAAA,OAAO,CAACL,KAAR,CAAe,8BAA6BA,KAAK,CAACM,OAAQ,EAA1D;AACD,KAlBD;AAmBD,GApBQ,EAoBN,EApBM,CAAT;AAsBA,MAAIC,SAAS,GAAGhB,KAAK,CAACiB,GAAN,CAAWC,IAAD,IAAU;AAClC,wBACE,oBAAC,cAAD;AACA,MAAA,GAAG,EAAEA,IAAI,CAACC,GADV;AAEA,MAAA,EAAE,EAAED,IAAI,CAACC,GAFT;AAGA,MAAA,IAAI,EAAED,IAAI,CAACE,IAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAOD,GARe,CAAhB;AAUA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,eAEE,oBAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,SAAL,CAHF,CADF;AAOD,CA1CD;;AA4CA,eAAelB,wBAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nimport CharacterTiles from \"../components/CharacterTiles\"\nimport CharactersNewForm from \"../components/CharactersNewForm\"\n\nconst CharactersIndexContainer = (props) => {\n  let [chars, setChars] = useState([])\n\n  useEffect(() => {\n    fetch('/characters')\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((body) => {\n      setChars(body)\n    })\n    .catch((error) => {\n      console.error(`Error fetching characters: ${error.message}`)\n    })\n  }, [])\n\n  let charTiles = chars.map((char) => {\n    return (\n      <CharacterTiles\n      key={char._id}\n      id={char._id}\n      name={char.name}\n      />\n    )\n  })\n\n  return (\n    <div>\n      <h1>Characters Index Page</h1>\n      <CharactersNewForm />\n      <ul>{charTiles}</ul>\n    </div>\n  )\n}\n\nexport default CharactersIndexContainer\n"]},"metadata":{},"sourceType":"module"}