{"ast":null,"code":"var _jsxFileName = \"/Users/grasscopper/playground/react/src/containers/CharactersShowContainer.js\";\nimport React, { useState, useEffect } from \"react\";\n\nconst CharactersShowContainer = props => {\n  let [char, setChar] = useState({\n    name: \"\",\n    origin: \"\",\n    description: \"\"\n  });\n  let charID = props.match.params.id;\n  useEffect(() => {\n    fetch(`/characters/${charID}`).then(response => {\n      if (response.ok) {\n        return response;\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`;\n        let error = new Error(errorMessage);\n        throw error;\n      }\n    }).then(response => {\n      return response.json();\n    }).then(body => {\n      setChar({\n        name: body[0].name,\n        origin: body[0].origin,\n        description: body[0].description\n      });\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Character Show Page\"), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, char.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Origin: \", char.origin), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"Description: \", char.description));\n};\n\nexport default CharactersShowContainer;","map":{"version":3,"sources":["/Users/grasscopper/playground/react/src/containers/CharactersShowContainer.js"],"names":["React","useState","useEffect","CharactersShowContainer","props","char","setChar","name","origin","description","charID","match","params","id","fetch","then","response","ok","errorMessage","status","statusText","error","Error","json","body"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,MAAMC,uBAAuB,GAAIC,KAAD,IAAW;AACzC,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC;AAC7BM,IAAAA,IAAI,EAAE,EADuB;AAE7BC,IAAAA,MAAM,EAAE,EAFqB;AAG7BC,IAAAA,WAAW,EAAE;AAHgB,GAAD,CAA9B;AAKA,MAAIC,MAAM,GAAGN,KAAK,CAACO,KAAN,CAAYC,MAAZ,CAAmBC,EAAhC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,KAAK,CAAE,eAAcJ,MAAO,EAAvB,CAAL,CACCK,IADD,CACOC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,EAAb,EAAiB;AACf,eAAOD,QAAP;AACD,OAFD,MAEO;AACL,YAAIE,YAAY,GAAI,GAAEF,QAAQ,CAACG,MAAO,KAAIH,QAAQ,CAACI,UAAW,EAA9D;AACA,YAAIC,KAAK,GAAG,IAAIC,KAAJ,CAAUJ,YAAV,CAAZ;AACA,cAAMG,KAAN;AACD;AACF,KATD,EAUCN,IAVD,CAUOC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACO,IAAT,EAAP;AACD,KAZD,EAaCR,IAbD,CAaOS,IAAD,IAAU;AACdlB,MAAAA,OAAO,CAAC;AACNC,QAAAA,IAAI,EAAEiB,IAAI,CAAC,CAAD,CAAJ,CAAQjB,IADR;AAENC,QAAAA,MAAM,EAAEgB,IAAI,CAAC,CAAD,CAAJ,CAAQhB,MAFV;AAGNC,QAAAA,WAAW,EAAEe,IAAI,CAAC,CAAD,CAAJ,CAAQf;AAHf,OAAD,CAAP;AAKD,KAnBD;AAoBD,GArBQ,EAqBN,EArBM,CAAT;AAuBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,IAAI,CAACE,IAAV,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYF,IAAI,CAACG,MAAjB,CAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAiBH,IAAI,CAACI,WAAtB,CAJF,CADF;AAQD,CAvCD;;AAyCA,eAAeN,uBAAf","sourcesContent":["import React, { useState, useEffect } from \"react\"\n\nconst CharactersShowContainer = (props) => {\n  let [char, setChar] = useState({\n    name: \"\",\n    origin: \"\",\n    description: \"\"\n  })\n  let charID = props.match.params.id\n\n  useEffect(() => {\n    fetch(`/characters/${charID}`)\n    .then((response) => {\n      if (response.ok) {\n        return response\n      } else {\n        let errorMessage = `${response.status}: ${response.statusText}`\n        let error = new Error(errorMessage)\n        throw(error)\n      }\n    })\n    .then((response) => {\n      return response.json()\n    })\n    .then((body) => {\n      setChar({\n        name: body[0].name,\n        origin: body[0].origin,\n        description: body[0].description\n      })\n    })\n  }, [])\n\n  return (\n    <div>\n      <h1>Character Show Page</h1>\n      <h2>{char.name}</h2>\n      <p>Origin: {char.origin}</p>\n      <p>Description: {char.description}</p>\n    </div>\n  )\n}\n\nexport default CharactersShowContainer\n"]},"metadata":{},"sourceType":"module"}